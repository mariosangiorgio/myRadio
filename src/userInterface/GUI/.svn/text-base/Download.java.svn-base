package userInterface.GUI;

import core.Downloader;
import core.interfaces.listeners.IDownloadListener;
import core.myRadioLogger;
import data.Item;
import java.util.logging.Level;

public class Download extends javax.swing.JFrame implements Runnable, IDownloadListener {

    private Downloader downloader;
    public boolean finished;

    public Download(Downloader downloader) {
        this.downloader = downloader;
        this.finished = false;
        initComponents();

        //Launching the thread
        new Thread(this).start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        cancel = new javax.swing.JButton();
        ok = new javax.swing.JToggleButton();
        downloadedBytes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Download");

        title.setText(downloader.getDownloadTitle());

        progressBar.setMaximum(downloader.getTotal());

        cancel.setText("Cancel");
        cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelDownload(evt);
            }
        });

        ok.setText("Ok");
        ok.setEnabled(false);
        ok.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okMouseClicked(evt);
            }
        });

        downloadedBytes.setText("Downloaded:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadedBytes))
                    .addComponent(title)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ok)
                    .addComponent(cancel)
                    .addComponent(downloadedBytes))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void okMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okMouseClicked
    dispose();
}//GEN-LAST:event_okMouseClicked

private void cancelDownload(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelDownload
    downloader.cancelDownload();
}//GEN-LAST:event_cancelDownload

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JLabel downloadedBytes;
    private javax.swing.JToggleButton ok;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    public void run() {
        while (finished == false) {
            downloadedBytes.setText("Downloaded Bytes: " + downloader.getDownloaded());
            if (downloader.getDownloaded() < downloader.getTotal()) {
                progressBar.setValue(downloader.getDownloaded());
            } else {
                //Switching to indeterminate mode
                progressBar.setIndeterminate(true);
            }
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                myRadioLogger.getLogger().log(Level.SEVERE, "Download UI thread interrupted", ex);
            }
        }
        progressBar.setValue(downloader.getTotal());
    }

    public void downloadCompleted(Item item) {
        finished = true;
        progressBar.setIndeterminate(false);
        downloadedBytes.setText("Download complete");
        ok.setEnabled(true);
        cancel.setEnabled(false);
    }
}

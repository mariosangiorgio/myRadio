package userInterface.GUI;

import core.Core;
import core.Downloader;
import core.config.Config;
import core.exceptions.NameAlreadyInUseException;
import core.interfaces.ICoreToUser;
import core.interfaces.listeners.IDownloadListener;
import core.interfaces.listeners.INewElementListener;
import core.Podcast;
import core.interfaces.listeners.INetworkErrorListener;
import core.myRadioLogger;
import data.Item;
import userInterface.GUI.exceptions.NoSystemTrayException;
import userInterface.GUI.systemTray.SystemTrayElement;

import java.io.File;
import java.net.URL;
import java.util.Vector;
import java.util.logging.Level;

import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import userInterface.GUI.MainWindow;

public class MainWindow extends javax.swing.JFrame
        implements IDownloadListener, INewElementListener, INetworkErrorListener {

    private ICoreToUser core;
    private SystemTrayElement systemTrayElement;

    public void setSystemTrayElement(SystemTrayElement systemTrayElement) {
        this.systemTrayElement = systemTrayElement;
    }

    void subscribe(String name, URL url) throws NameAlreadyInUseException {
        core.subscribe(name, url);
        updatePodcastList();
    }

    private void updatePodcastList() {
        podcastList.setListData(core.getPodcasts().values().toArray());
        podcastList.updateUI();
    }

    private void updateAvaliableList() {
        //Looking for the podcast selected
        Podcast selectedPodcast = (Podcast) podcastList.getSelectedValue();
        if (selectedPodcast == null) {
            availableList.setListData(new Vector());
            availableList.updateUI();
            return;
        }
        availableList.setListData(selectedPodcast.getDownloadQueue().toArray());
        availableList.updateUI();
    }

    private void updateDownloadedList() {
        //Looking for the podcast selected
        Podcast selectedPodcast = (Podcast) podcastList.getSelectedValue();
        if (selectedPodcast == null) {
            downloadedList.setListData(new Vector());
            downloadedList.updateUI();
            return;
        }
        downloadedList.setListData(selectedPodcast.getDownloadedItems().values().toArray());
        downloadedList.updateUI();
    }
    //End of helper functions

    //Action listeners
    public void downloadCompleted(Item item) {
        updateAvaliableList();
        updateDownloadedList();
    }
    //End of action listeners

    /** Creates new form MainWindow
     * @param core 
     */
    public MainWindow(ICoreToUser core) {
        this.core = core;
        initComponents();
        updatePodcastList();
        core.registerNewElementListener(this);
        core.registerNetworkErrorListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        podcastListPane = new javax.swing.JScrollPane();
        podcastList = new javax.swing.JList();
        downloadedListPane = new javax.swing.JScrollPane();
        downloadedList = new javax.swing.JList();
        labelDownloadedItems = new javax.swing.JLabel();
        labelAvailableItems = new javax.swing.JLabel();
        downloadSelectedButton = new javax.swing.JButton();
        updateSelected = new javax.swing.JButton();
        updateAll = new javax.swing.JButton();
        availableListPane = new javax.swing.JScrollPane();
        availableList = new javax.swing.JList();
        markAsDownloaded = new javax.swing.JButton();
        appMenu = new javax.swing.JMenuBar();
        podcastMenu = new javax.swing.JMenu();
        getNew = new javax.swing.JMenuItem();
        subscribe = new javax.swing.JMenuItem();
        unsubscribe = new javax.swing.JMenuItem();
        items = new javax.swing.JMenu();
        downloadSelected = new javax.swing.JMenuItem();
        configureMenu = new javax.swing.JMenu();
        setDownloadFolder = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("myRadio");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });

        podcastList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        podcastList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updatePodcastDetails(evt);
            }
        });
        podcastList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                podcastListKeyReleased(evt);
            }
        });
        podcastListPane.setViewportView(podcastList);

        downloadedListPane.setViewportView(downloadedList);

        labelDownloadedItems.setText("Downloaded Items");

        labelAvailableItems.setText("Available Items");

        downloadSelectedButton.setText("Download selected");
        downloadSelectedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadSelectedButtonMouseClicked(evt);
            }
        });

        updateSelected.setText("UpdateSelected");
        updateSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateSelectedMouseClicked(evt);
            }
        });

        updateAll.setText("UpdateAll");
        updateAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateAllMouseClicked(evt);
            }
        });

        availableListPane.setViewportView(availableList);

        markAsDownloaded.setText("Mark as downloaded");
        markAsDownloaded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAsDownloadedActionPerformed(evt);
            }
        });

        podcastMenu.setText("Podcast");

        getNew.setText("Get new items");
        getNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getNewItems(evt);
            }
        });
        podcastMenu.add(getNew);

        subscribe.setText("Subscribe");
        subscribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscribe(evt);
            }
        });
        podcastMenu.add(subscribe);

        unsubscribe.setText("Unsubscribe");
        unsubscribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unsubscribe(evt);
            }
        });
        podcastMenu.add(unsubscribe);

        appMenu.add(podcastMenu);

        items.setText("Items");

        downloadSelected.setText("Download selected items");
        downloadSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadSelectedItems(evt);
            }
        });
        items.add(downloadSelected);

        appMenu.add(items);
        
        // Adding configure menu to set download folder
        configureMenu.setText("Configure");
        
        setDownloadFolder.setText("Set Download Folder");
        setDownloadFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	setDownloadFolder(evt);
            }
        });
        configureMenu.add(setDownloadFolder); 
        
        appMenu.add(configureMenu); // End add configure menu and set download folder to GUI

        setJMenuBar(appMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(updateAll, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateSelected, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addGap(205, 205, 205))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(labelDownloadedItems)
                                .addGap(129, 129, 129)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labelAvailableItems)
                                    .addComponent(markAsDownloaded, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(downloadSelectedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(podcastListPane, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(downloadedListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(availableListPane, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(podcastListPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateAll)
                    .addComponent(updateSelected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDownloadedItems)
                    .addComponent(labelAvailableItems))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(downloadedListPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availableListPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadSelectedButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markAsDownloaded)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateSelectedPodcastInfo() {
        Podcast selectedPodcast = (Podcast) podcastList.getSelectedValue();
        if (selectedPodcast == null) {
            return;
        }
        core.updatePodcast(selectedPodcast);
    //Update of the UI will be performed by the NewElementListener
    }
private void getNewItems(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getNewItems
    updateSelectedPodcastInfo();
}//GEN-LAST:event_getNewItems

private void subscribe(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscribe
    Subscription subscription = new Subscription(this);
    subscription.setVisible(true);
}//GEN-LAST:event_subscribe

private void unsubscribe(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unsubscribe
    //Unsubscibing from the selected podcast
    Podcast selectedPodcast = (Podcast) podcastList.getSelectedValue();
    if (selectedPodcast == null) {
        return;
    }
    core.unsubscribe(selectedPodcast.getName());
    updatePodcastList();
    updateAvaliableList();
    updateDownloadedList();
}//GEN-LAST:event_unsubscribe

    private void downloadSelectedItems() {
        Podcast selectedPodcast = (Podcast) podcastList.getSelectedValue();
        Object[] selectedItems = availableList.getSelectedValues();
        if (selectedItems == null || selectedPodcast == null) {
            return;
        }
        for (Object item : selectedItems) {
            Downloader downloader = core.download(selectedPodcast, (Item) item);
            downloader.addListener(this);
            Download download = new Download(downloader);
            downloader.addListener(download);
            downloader.addListener(systemTrayElement);
            download.setVisible(true);
        }
    }

private void downloadSelectedItems(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadSelectedItems
    downloadSelectedItems();
}//GEN-LAST:event_downloadSelectedItems

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    //Saving status and then EXIT with the default operation
    core.save();
}//GEN-LAST:event_formWindowClosing

private void updatePodcastDetails(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatePodcastDetails
    updateDownloadedList();
    updateAvaliableList();
}//GEN-LAST:event_updatePodcastDetails

private void downloadSelectedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadSelectedButtonMouseClicked
    downloadSelectedItems();
}//GEN-LAST:event_downloadSelectedButtonMouseClicked

private void updateAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateAllMouseClicked
    core.updateAllPodcasts();
    updateAvaliableList();
    updateDownloadedList();
}//GEN-LAST:event_updateAllMouseClicked

private void updateSelectedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateSelectedMouseClicked
    updateSelectedPodcastInfo();
}//GEN-LAST:event_updateSelectedMouseClicked

private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
    if (systemTrayElement != null) {
        setVisible(false);
    }
}//GEN-LAST:event_formWindowIconified

private void podcastListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_podcastListKeyReleased
    updateDownloadedList();
    updateAvaliableList();
}//GEN-LAST:event_podcastListKeyReleased

private void markAsDownloadedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markAsDownloadedActionPerformed
    Podcast selectedPodcast = (Podcast) podcastList.getSelectedValue();
    Object[] selectedItems = availableList.getSelectedValues();
    if (selectedItems == null || selectedPodcast == null) {
        return;
    }
    for (Object item : selectedItems) {
        core.markAsDownloaded(selectedPodcast, (Item) item);
    }
    updateAvaliableList();
    updateDownloadedList();
}//GEN-LAST:event_markAsDownloadedActionPerformed

// Called when "Set Download Folder" is chosen.
private void setDownloadFolder(java.awt.event.ActionEvent evt) {
	Config lastConfig = Config.getConfig();
	JFileChooser filechooser = new JFileChooser();
	filechooser.setCurrentDirectory(new File(lastConfig.getPodcastFolder()));
	filechooser.setDialogTitle("Set new Podcast Directory");
	
	// Only looking at directories
	filechooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	int rVal = filechooser.showOpenDialog(filechooser);
	if (rVal == JFileChooser.APPROVE_OPTION) {
		String relFolder = filechooser.getSelectedFile().getName();
		String dirPath = filechooser.getCurrentDirectory().toString();
		String setFolder = dirPath + "/" + relFolder;
		//System.out.println("Full file path: " + setFolder);
		core.setDownloadFolder(setFolder);
	} else if (rVal == JFileChooser.CANCEL_OPTION) {
		//System.out.println("You pressed Cancel");
	}
	//System.out.println("Calling setDownloadFolder");
}

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ex) {
                    myRadioLogger.getLogger().log(Level.SEVERE,"Error setting look and feel",ex);
                }
                Core core = Core.load();
                MainWindow mainWindow = new MainWindow(core);
                try {
                    SystemTrayElement systemTrayElement = new SystemTrayElement(mainWindow);
                    mainWindow.setSystemTrayElement(systemTrayElement);
                    core.registerNewElementListener(systemTrayElement);
                    core.registerNetworkErrorListener(systemTrayElement);
                } catch (NoSystemTrayException ex) {
                    mainWindow.setVisible(true);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar appMenu;
    private javax.swing.JList availableList;
    private javax.swing.JScrollPane availableListPane;
    private javax.swing.JMenuItem downloadSelected;
    private javax.swing.JButton downloadSelectedButton;
    private javax.swing.JList downloadedList;
    private javax.swing.JScrollPane downloadedListPane;
    private javax.swing.JMenuItem getNew;
    private javax.swing.JMenu items;
    private javax.swing.JLabel labelAvailableItems;
    private javax.swing.JLabel labelDownloadedItems;
    private javax.swing.JButton markAsDownloaded;
    private javax.swing.JList podcastList;
    private javax.swing.JScrollPane podcastListPane;
    private javax.swing.JMenu podcastMenu;
    private javax.swing.JMenuItem subscribe;
    private javax.swing.JMenuItem unsubscribe;
    private javax.swing.JButton updateAll;
    private javax.swing.JButton updateSelected;
    private javax.swing.JMenu configureMenu;
    private javax.swing.JMenuItem setDownloadFolder;
    // End of variables declaration//GEN-END:variables

    @Override
    public void newElementFound(Podcast podcast) {
        //Forcing an UI update when new elements are found
        updateAvaliableList();
        updateDownloadedList();
    }

    @Override
    public void networkErrorDetected(Exception exception) {
        if (isVisible()) {
            new ErrorNotifier(exception.toString());
        }
    }
}
